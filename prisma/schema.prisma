generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_ {
  id                  String               @id @default(uuid())
  fullname            String
  email               String               @unique
  username            String               @unique
  password            String
  location            String
  role                String               @default("user")
  items               item[]
  bids                bid[]
  notification_tokens notification_token[]
  subscription        subscription[]
}

model item {
  id           String    @id @default(uuid())
  name         String
  description  String
  isSold       Boolean   @default(false)
  imageUrl     String    @default("")
  item_type_id Int
  item_type    item_type @relation(fields: [item_type_id], references: [id])
  auctions     auction[]
  winner_id    String?
  winner       user_?    @relation(fields: [winner_id], references: [id])
  final_price  Decimal?
  win_bid_id   String?   @unique
  win_bid      bid?      @relation(fields: [win_bid_id], references: [id])
  createdAt    DateTime? @default(now())
  not_for_sale Boolean   @default(false)
}

model item_type {
  id          Int     @id @default(autoincrement())
  type        String
  description String?
  iconUrl     String?
  items       item[]
}

model auction_category {
  id          Int       @id @default(autoincrement())
  type        String
  description String?
  iconUrl     String?
  auctions    auction[]
}

model auction {
  id                 String           @id @default(uuid())
  item_id            String
  item               item             @relation(fields: [item_id], references: [id], onDelete: Cascade)
  deadline           DateTime         @default(dbgenerated("NOW() + interval '48 hours'"))
  isComplete         Boolean          @default(false)
  isCancelled        Boolean          @default(false)
  createdAt          DateTime         @default(now())
  start_value        Float            @default(0.00)
  bids               bid[]
  auction_category   auction_category @relation(fields: [auction_categoryId], references: [id])
  auction_categoryId Int
  subscription       subscription[]
}

model bid {
  id         String   @id @default(uuid())
  auction_id String
  auction    auction  @relation(fields: [auction_id], references: [id], onDelete: Cascade)
  bidder_id  String
  bidder     user_    @relation(fields: [bidder_id], references: [id], onDelete: Cascade)
  price      Float    @default(0.00)
  bid_time   DateTime @default(now())
  item       item?
}

model notification {
  id                   String             @id @default(uuid())
  notification_token   notification_token @relation(fields: [notification_tokenId], references: [id])
  notification_tokenId String
  title                String
  body                 String
  href                 String?
  createdAt            DateTime           @default(now())
  isRead               Boolean            @default(false)
}

model notification_token {
  id                 String         @id @default(uuid())
  user_id            String
  user               user_          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  device_type        String
  notification_token String         @unique
  active             Boolean        @default(true)
  notifications      notification[]
}

model subscription {
  auction_id          String
  auction             auction @relation(fields: [auction_id], references: [id], onDelete: Cascade)
  user_id             String
  user                user_   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  notificationEnabled Boolean @default(false)

  @@id([user_id, auction_id])
}
